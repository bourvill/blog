<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Bourvill blog</title><description></description><link>https://maxime.marinel.me</link><language>fr</language><lastBuildDate>jeu., 2 janv. 2020 09:28:08 +0100</lastBuildDate><pubDate>jeu., 2 janv. 2020 09:28:08 +0100</pubDate><ttl>250</ttl><atom:link href="https://maxime.marinel.me/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://maxime.marinel.me/posts/first-post</guid><title>UIColor : Quick tips and color your Life!</title><description>UIColor : Quick tips and color your Life!</description><link>https://maxime.marinel.me/posts/first-post</link><pubDate>dim., 31 déc. 2017 17:11:00 +0100</pubDate><content:encoded><![CDATA[<h1>UIColor : Quick tips and color your Life!</h1><p>Before start, we need to create an extension, it’s simple. Create a new file with this:</p><pre><code>extension UIColor {
}
</code></pre><h2>UIColor with Int for RGB color</h2><p>Now we can create an initializer for UIColor and to be able to handle Int value</p><pre><code class="language-swift">extension UIColor {
     convenience init(red: Int, green: Int, blue: Int) {
        assert(red &gt;= 0 &amp;&amp; red &lt;= 255, "Invalid red")
        assert(green &gt;= 0 &amp;&amp; green &lt;= 255, "Invalid green")
        assert(blue &gt;= 0 &amp;&amp; blue &lt;= 255, "Invalid blue")
        self.init(red: CGFloat(red) / 255.0, green: CGFloat(green) / 255.0, blue: CGFloat(blue) / 255.0, alpha: 1.0)
    }
}
</code></pre><p>In this part of code, we have created a “convenience” initializer</p><blockquote><p>Convenience initializers are also aptly named, and they are initializers used to make initialization a bit easier. Designated initializers tend to set all of the properties up and let the user send in values for each. A convenience initializer often has some of those hard coded, and thus can take less parameters.The developer usually write’s a convenience initializer to set some defaults that are appropriate to a special use case.</p></blockquote><p>And we use a “assert” keyword</p><blockquote><p>Assert is first shot I came along for asserts. As expected, assert() is evaluated only in debug mode (this is the general rule for asserts in programming languages).</p></blockquote><p>Now you can use in your code like this:</p><pre><code>let color = UIColor(red: 100, green: 50, blue: 50)
</code></pre><h2>UIColor from hex</h2><p>Now add an initializer for UIColor and to be able to handle Hexa value</p><pre><code>extension UIColor {
    convenience init(hex:Int) {
        self.init(red:(hex &gt;&gt; 16) &amp; 0xff, green:(hex &gt;&gt; 8) &amp; 0xff, blue:hex &amp; 0xff)
    }
}
</code></pre><p>and use like this:</p><pre><code>let red = UIColor(hex: 0xFF0000)
</code></pre><p>Enjoy! And now color your life !</p>]]></content:encoded></item></channel></rss>